<chapter id="indices">
 <title>Indexes</title>

      <sect1 id="ind.sphere">
        <title>
          Spherical index
        </title>
        <para>
          <application>pgSphere</application> uses <literal>GiST</literal>
          and Block Range INdexing (<literal>BRIN</literal>) algorithms to create
          spherical indices.
          <literal>GiST</literal> indexes utilize an R-tree implementation for
          spherical objects, while <literal>BRIN</literal> indexes are based on the "summarization"
          of data blocks (<literal>pages</literal>) on physical storage in order to
          organize data searches on ranges of summarized data that can be easily skipped
          on the base of search filters (see <ulink
          url="https://www.postgresql.org/docs/current/brin-intro.html"><citetitle>
          PostgreSQL documentation</citetitle></ulink> for further details on BRIN indexes).
          As a consequence, BRIN indexes are very small indexes (up to 1000 times smaller
          than GiST ones), generally with lower performance compared with a GiST one,
          but up to 100 times faster than a full sequential scan of a table performed
          without any index. So BRIN indexes are particularly suitable in a big data context.
          An index speeds up the execution time of searches based on operators <link
          linkend="op.over"><literal>&lt;@</literal></link>, <link
          linkend="op.over"><literal>@</literal></link>, <link
          linkend="op.over"><literal>&amp;&amp;</literal></link>, <link
          linkend="op.cross"><literal>&num;</literal></link>, <link
          linkend="op.equal"><literal>=</literal></link>, and <link
          linkend="op.equal"><literal>!=</literal></link>.
        </para>
        <para>
          You can create a GiST index with the following spherical data types:
        </para>
        <itemizedlist>
          <listitem>
            <para>
               point (<type>spoint</type>)
            </para>
          </listitem>
          <listitem>
            <para>
              circle (<type>scircle</type>)
            </para>
          </listitem>
          <listitem>
            <para>
              line (<type>sline</type>)
            </para>
          </listitem>
          <listitem>
            <para>
              ellipse (<type>sellipse</type>)
            </para>
          </listitem>
          <listitem>
            <para>
              polygon (<type>spoly</type>)
            </para>
          </listitem>
          <listitem>
            <para>
              path (<type>spath</type>)
            </para>
          </listitem>
          <listitem>
            <para>
              coordinates range (<type>sbox</type>)
            </para>
          </listitem>
        </itemizedlist>
        <para>
          GiST index can be used also for fast finding points closest to the given one 
          when ordering by an expression with the <literal>&lt;-&gt;</literal> operator
          is used, as shown in an example below.
        </para>
        <para>
          BRIN indexing supports just spherical points (<type>spoint</type>)
          and spherical coordinates range (<type>sbox</type>) at the moment.
        </para>
        <example>
          <title>Simple index of spherical points</title>
          <programlisting>
<![CDATA[CREATE TABLE test (]]>
<![CDATA[  pos spoint NOT NULL]]>
<![CDATA[);]]>
<![CDATA[-- Put in data now]]>
<![CDATA[CREATE INDEX test_pos_idx ON test USING GIST (pos);]]>
<![CDATA[VACUUM ANALYZE test;]]>
          </programlisting>
          <para>
           To find points closest to a given spherical position, use the <literal>&lt;-&gt;</literal> operator:
          </para>
          <programlisting>
<![CDATA[SELECT * FROM test ORDER BY pos <-> spoint (0.2, 0.3) LIMIT 10 ]]>
          </programlisting>

          <para>
            BRIN index can be created through the following syntax:
          </para>
          <programlisting>
<![CDATA[CREATE INDEX test_pos_idx USING BRIN ON test (pos);]]>
          </programlisting>
          <para>
            By default, BRIN indexes summarize blocks of 128 pages. The smaller the
            number of pages specified, the higher the granularity in searches,
            and the gap in performance between GiST indexes and BRIN indexes will be
            decreased. Note that the size of the BRIN indexes increases as well.
            Different summarizations can be specified with the following
            command:
          </para>
          <programlisting>
<![CDATA[CREATE INDEX test_pos_idx USING BRIN ON test (pos) WITH (pages_per_range = 16);]]>
          </programlisting>
        </example>
      </sect1>

      <sect1 id="ind.smoc">
        <title>
          <type>smoc</type> index
        </title>
        <para>
          <application>pgSphere</application> uses <literal>GIN</literal>
          to create smoc indices. An index speeds up the execution
          time of operators <link
          linkend="op.over"><literal>&lt;@</literal></link>, <link
          linkend="op.over"><literal>@&gt;</literal></link>, <link
          linkend="op.over"><literal>&amp;&amp;</literal></link>, <link
          linkend="op.equal"><literal>=</literal></link>, and <link
          linkend="op.equal"><literal>&lt;&gt;</literal></link>.
        </para>
        <para>
          The index works by casting all contained smocs to a fixed level, and
          for each pixel at that level, storing which smocs overlap with that
          pixel. This is especially beneficial for "overlaps" queries using
          the <literal>&amp;&amp;</literal> operator.
          The downside of that approach is that storing large
          smocs like "all sky" (<literal>0/0-11</literal>) produces a large
          number of index entries.
        </para>
        <para>
          The default opclass <literal>smoc_gin_ops</literal> defaults to
          working on level 5 with a resolution of 12288 pixels (12 * 4^5).
          An alternative granularity can be selected by setting the
          <literal>order</literal> parameter on the opclass (integer value
          between 0 and 12; option only available on PG 13 and later).
          The alternative <literal>smoc_gin_ops_fine</literal> opclass works
          on level 8 with 786432 pixels.
        </para>
        <example>
          <title>Index of smoc coverage objects</title>
          <programlisting>
<![CDATA[CREATE TABLE ivoa (]]>
<![CDATA[  coverage smoc NOT NULL]]>
<![CDATA[);]]>
<![CDATA[-- Put in data now]]>
<![CDATA[-- Create index with the defaut smoc_gin_ops opclass (order 5)]]>
<![CDATA[CREATE INDEX ON ivoa USING GIN (coverage);]]>
<![CDATA[-- Alternative index with more detail on order 7]]>
<![CDATA[CREATE INDEX ivoa_order_7_idx ON ivoa USING GIN (coverage smoc_gin_ops (order = 7));]]>
<![CDATA[-- Alternative operator class with fixed order 8]]>
<![CDATA[CREATE INDEX ivoa_fine_idx ON ivoa USING GIN (coverage smoc_gin_ops_fine);]]>
          </programlisting>
        </example>

      </sect1>

      <sect1 id="ind.hash">
        <title>
          Hash index
        </title>
        <para>
          Values of type <type>spoint</type> can be indexed using a
          <literal>HASH</literal> index, supporting the
          <link linkend="op.equal"><literal>=</literal></link> operator.
          The <literal>spoint_hash_ops</literal> operator class also enables
          <literal>DISTINCT</literal> queries on <type>spoint</type>.
        </para>
        <example>
          <title>Hash index of spoints</title>
          <programlisting>
<![CDATA[CREATE TABLE sky (]]>
<![CDATA[  star spoint]]>
<![CDATA[);]]>
<![CDATA[CREATE INDEX ON sky USING HASH (star);]]>
<![CDATA[]]>
<![CDATA[SELECT DISTINCT star FROM sky;]]>
          </programlisting>
        </example>

      </sect1>

</chapter>
